<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Framer Motion으로 텍스트 애니메이션 만들기</title>
      <link href="/2023/09/24/typing-animation/"/>
      <url>/2023/09/24/typing-animation/</url>
      
        <content type="html"><![CDATA[<p></pre></p><p>안녕하세요 감자입니다. 오늘은 Framer Motion을 이용해서 타이핑 애니메이션을 추가하는 방법을 알아보겠습니다.</p><div style="position: relative; height: 500px">  <div    id="loading-message"    style="      display: grid;      place-content: center;      position: absolute;      font-size: 24px;      top: 0;      left: 0;      width: 100%;      height: 100%;      border: 0;      border-radius: 8px;      margin-bottom: 16px;    "  >    Loading...  </div>  <iframe    id="my-iframe"    style="      width: 100%;      height: 100%;      border: 0;      border-radius: 8px;      margin-bottom: 16px;      z-index: 100;    "    srcdoc='    <head>  <script    type="module"    crossorigin    src="/html/typing-animation/assets/index-1b6972df.js"  ></script>  <link    rel="stylesheet"    href="/html/typing-animation/assets/index-d0d57366.css"  /></head><div id="root"></div>'></iframe></div><script>  var iframe = document.getElementById("my-iframe");  var loadingMessage = document.getElementById("loading-message");  iframe.addEventListener("load", function () {    loadingMessage.style.display = "none"; // Hide the loading message  });</script><h2 id="Framer-Motion이-필요한-이유"><a href="#Framer-Motion이-필요한-이유" class="headerlink" title="Framer Motion이 필요한 이유"></a>Framer Motion이 필요한 이유</h2><p>CSS는 다양한 기능을 제공해주지만, 현재는 타이핑 애니메이션을 구현하기 위한 기능을 완벽하게 제공해주지 않습니다. 각각의 글자에 애니메이션을 적용하려면 일반적으로 <code>nth-child()</code>와 같은 selector를 사용하여 딜레이 시간을 적용시켜 주어야 합니다. 하지만 텍스트의 정확한 글자 수를 모르는 경우 이와 같은 방법은 상당히 번거로울 수 있습니다.</p><p>애니메이션 반복으로 타이핑 효과를 재현하려는 경우 CSS는 더 큰 문제점이 있습니다. 한 애니메이션의 끝과 다음 애니메이션의 시작 사이에 특정 지연 시간을 설정할 수 없고 애니메이션이 시작되기 전에만 지연 시간을 설정할 수 있기 때문입니다.</p><p>이런점에서 Framer Motion은 기존 CSS가 해결해 주지 못하는 문제점들을 해결 해줄수 있습니다.</p><h2 id="목표"><a href="#목표" class="headerlink" title="목표"></a>목표</h2><p>저는 다음과 같은 기능을 갖춘 <code>AnimatedText</code> 컴포넌트를 만들겠다는 목표를 가지고 있습니다:</p><ul><li>타이핑 에니메이션</li><li>Tailwind CSS와 호환되는 클래스 이름</li><li>어떠한 텍스트도 처리할 수 있는 기능</li><li>한 문장 뿐만 아니라 여러 문장과의 호환성</li><li>사용자 친화적인 애니메이션 컨트롤</li><li>스크롤 트리거 애니메이션</li><li>사실적인 타이핑 효과를 위한 애니메이션 반복 (선택 사항)</li><li>컴포넌트 사용은 아래와 같이 간단해야 합니다:</li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">AnimatedText</span></span><br><span class="line">  text=&#123;[</span><br><span class="line">    <span class="string">&quot;This is written on&quot;</span>,</span><br><span class="line">    <span class="string">&quot;a typing machine. Tick tick&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tick tack tack...&quot;</span>,</span><br><span class="line">    <span class="string">&quot;이것은 타자기로&quot;</span>,</span><br><span class="line">    <span class="string">&quot;작성되었습니다. 타닥&quot;</span>,</span><br><span class="line">    <span class="string">&quot;타닥 타다닥...&quot;</span>,</span><br><span class="line">  ]&#125;</span><br><span class="line">  className=<span class="string">&quot;text-4xl&quot;</span></span><br><span class="line">  repeatDelay=&#123;<span class="number">10000</span>&#125;</span><br><span class="line">  animation=&#123;&#123;</span><br><span class="line">    <span class="attr">hidden</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    <span class="attr">visible</span>: &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">transition</span>: &#123; <span class="attr">staggerChildren</span>: <span class="number">0.1</span> &#125; &#125;,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="AnimatedText-컴포넌트-만들기"><a href="#AnimatedText-컴포넌트-만들기" class="headerlink" title="AnimatedText 컴포넌트 만들기"></a>AnimatedText 컴포넌트 만들기</h2><p>이제 차근차근 <code>AnimatedText</code> 컴포넌트를 만들어 보겠습니다. 가장 먼저 할 일은 단어를 받아 개별 문자로 분해하는 것입니다. 이를 위해 문자열에 <code>split(&quot;&quot;)</code> 메서드를 사용하여 문자 배열을 제공합니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AnimatedTextProps</span> = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span>;</span><br><span class="line">  el?: keyof <span class="variable constant_">JSX</span>.<span class="property">IntrinsicElements</span>;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">AnimatedText</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  text,</span></span><br><span class="line"><span class="params">  el: Wrapper = <span class="string">&quot;p&quot;</span>,</span></span><br><span class="line"><span class="params">  className,</span></span><br><span class="line"><span class="params">&#125;: AnimatedTextProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;text.split(&quot;&quot;).map((char, charIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">motion.span</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">char</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">charIndex</span>&#125;`&#125; <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;char&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>여기서부터 몇 가지 중요한 단계 부터 시작하겠습니다.</p><p>14번째 줄 span에서 <code>sr-only</code> 텍스트를 렌더링합니다. 즉, 이 span 내의 콘텐츠는 보이지 않지만 스크린 리더(screen reader)에서만 액세스할 수 있습니다.</p><p>16번째 줄에서는 스크린 리더에는 숨겨져 있지만 사용자에게는 표시되는 콘텐츠를 볼수있습니다. 이것이 타이핑 애니메이션을 위해 개별 문자로 분할되는 텍스트입니다.</p><p>텍스트를 두 번 렌더링하는 것은 다음과 같은 목적이 있습니다. 간혹 문자가 별도의 span으로 나뉘어져 있는 경우 스크린 리더가 이를 완전한 단어가 아닌 약어로 해석할 수 있습니다. 이 문제를 해결하기 위해 <code>sr-only</code> span 내에서 전체 단어를 렌더링하도록 선택했습니다. 이렇게 하면 사용자에게 소리내어 읽혀지는 내용이 완전한 단어 또는 문장이 됩니다.</p><h2 id="애니메이션-추가하기"><a href="#애니메이션-추가하기" class="headerlink" title="애니메이션 추가하기"></a>애니메이션 추가하기</h2><p>이제 토대가 완성되었으니 여기에 애니메이션을 더할 차례입니다. 첫 번째 단계는 각 글자에 fade-in 애니메이션을 추가하는 것입니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">AnimatedText</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  text,</span></span><br><span class="line"><span class="params">  el: Wrapper = <span class="string">&quot;p&quot;</span>,</span></span><br><span class="line"><span class="params">  className,</span></span><br><span class="line"><span class="params">&#125;: AnimatedTextProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;word.split(&quot;&quot;).map((char, charIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">initial</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">0</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">animate</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">1</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">char</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">charIndex</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;char&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>아직 까지는 기본적인 fade-in 애니메이션 입니다. 한 단계 더 나아가서 시간차를 만들어 봅시다!</p><p>이를 위해 Framer Motion의 animation variant를 사용할겁니다. 이 방식은 <code>initial</code> 및 <code>animate</code> 스타일을 직접 적용하는 대신 애니메이션 상태에 고유한 이름을 사용하는 것입니다. 코드를 다음과 같이 수정해야 합니다:</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultAnimation = &#123;</span><br><span class="line">  <span class="attr">hidden</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">visible</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">AnimatedText</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  text,</span></span><br><span class="line"><span class="params">  el: Wrapper = <span class="string">&quot;p&quot;</span>,</span></span><br><span class="line"><span class="params">  className,</span></span><br><span class="line"><span class="params">&#125;: AnimatedTextProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.span</span> <span class="attr">aria-hidden</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;word.split(&quot;&quot;).map((char, charIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">variants</span>=<span class="string">&#123;defaultAnimation&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">char</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">charIndex</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;char&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>새로운 <code>defaultAnimation</code> 객체가 추가 되었습니다. 이 객체 안에는 다양한 애니메이션 상태가 정의되어 있습니다. 객체의 속성의 이름은 사용자 마음대로 정의할 수 있으며 각 상태 내에서 적용하려는 스타일을 지정합니다.</p><p>다음으로 부모 엘리멘트를 표준 <code>span</code> 대신 <code>motion.span</code>으로 변경했습니다. 개별 문자가 아닌 부모 컨테이너에 애니메이션을 적용하기 때문에 변경이 필요합니다. 그런 다음 <code>initial</code>과 <code>animate</code> 속성을 제거하고 대신 <code>variants</code>를 사용합니다.</p><p>이 단계에서는 이전과 크게 다르지 않습니다. 하지만 transition을 추가 함으로서 애니메이션간 딜레이가 발생하도록 할 수 있습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultAnimation = &#123;</span><br><span class="line">  <span class="attr">hidden</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">visible</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">AnimatedText</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  text,</span></span><br><span class="line"><span class="params">  el: Wrapper = <span class="string">&quot;p&quot;</span>,</span></span><br><span class="line"><span class="params">  className,</span></span><br><span class="line"><span class="params">&#125;: AnimatedTextProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">variants</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">visible:</span> &#123; <span class="attr">transition:</span> &#123; <span class="attr">staggerChildren:</span> <span class="attr">0.1</span> &#125; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">hidden:</span> &#123;&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initial</span>=<span class="string">&quot;hidden&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">animate</span>=<span class="string">&quot;visible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">aria-hidden</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;word.split(&quot;&quot;).map((char, charIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">variants</span>=<span class="string">&#123;defaultAnimation&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">char</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">charIndex</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;char&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>위의 코드에서 어떤 일이 일어나고 있을까요? 가장 먼저 부모 요소에 variant를 추가하였습니다. 하지만 부모 요소의 스타일은 variant에 따라 변경되지 않으므로 그에 대한 스타일을 정의하지 않습니다. 대신 <code>visible</code>상태 안에 <code>transition</code> 속성을 추가 했습니다. 이것은 varian를 적용할 때 자식에 딜레이를 두도록 지시합니다.</p><p>다음으로 부모에 대한 <code>initial</code>과 <code>animate</code> 속성을 다시 도입합니다. 이제 스타일을 지정하는 대신 variant 속성 이름을 값으로 할당합니다.</p><p>Framer Motion의 작동 방식 덕분에 부모에 대해 설정한 variant가 있고 자식에게는 없는 경우 자동으로 자식에게 상속 됩니다. 그 결과, 더 이상 자식에게 variant을 명시적으로 전달할 필요가 없으며, 글자가 하나씩 애니메이션되기 시작합니다!</p><h2 id="문제점-해결하기"><a href="#문제점-해결하기" class="headerlink" title="문제점 해결하기"></a>문제점 해결하기</h2><p>이제 다음 단계로 넘어가서 텍스트가 사용자의 시야에 표시될 때만 이 애니메이션이 시작되도록 하도록 하겠습니다. 이를 위해 Framer Motion에서 제공하는 <code>useInView</code> 훅의 기능을 활용하겠습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultAnimation = &#123;&#125;; <span class="comment">// see previous snippet</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">AnimatedText</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  text,</span></span><br><span class="line"><span class="params">  el: Wrapper = <span class="string">&quot;p&quot;</span>,</span></span><br><span class="line"><span class="params">  className,</span></span><br><span class="line"><span class="params">&#125;: AnimatedTextProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> isInView = <span class="title function_">useInView</span>(ref, &#123; <span class="attr">amount</span>: <span class="number">0.5</span>, <span class="attr">once</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">variants</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">visible:</span> &#123; <span class="attr">transition:</span> &#123; <span class="attr">staggerChildren:</span> <span class="attr">0.1</span> &#125; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">hidden:</span> &#123;&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initial</span>=<span class="string">&quot;hidden&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">animate</span>=<span class="string">&#123;isInView</span> ? &quot;<span class="attr">visible</span>&quot; <span class="attr">:</span> &quot;<span class="attr">hidden</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">aria-hidden</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;word.split(&quot;&quot;).map((char, charIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">variants</span>=<span class="string">&#123;defaultAnimation&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">char</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">charIndex</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;char&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>부모 요소에 <code>ref</code>를 추가하고 이를 <code>useInView</code> 훅에 전달합니다. 이 훅은 텍스트가 현재 사용자의 뷰 내에 있는지 여부를 나타내는 boolean 값을 반환합니다. 이 값을 활용하여 텍스트에 애니메이션을 적용할지 여부를 결정하고, 애니메이션 속성에서 적절한 variant를 설정하여 이를 구현합니다. 꽤 깔끔하지 않나요?</p><h2 id="단-한번만-애니메이션-적용하기"><a href="#단-한번만-애니메이션-적용하기" class="headerlink" title="단 한번만 애니메이션 적용하기"></a>단 한번만 애니메이션 적용하기</h2><p>기본값으로 <code>useInView</code> 훅의 once값을 true를 할당했습니다. 그러나 텍스트가 사용자 뷰에 들어올 때마다 애니메이션이 활성화되도록 하려면 false로 설정하면 됩니다.</p><h2 id="애니메이션-반복-활성화"><a href="#애니메이션-반복-활성화" class="headerlink" title="애니메이션 반복 활성화"></a>애니메이션 반복 활성화</h2><p>마지막으로 애니메이션 반복기능을 추가 해보겠습니다. 간략히 설명하자면, 애니메이션을 직접 제어 하는 것입니다. 이렇게 하면 지정된 시간 제한 내에 애니메이션을 반복적으로 트리거할 수 있습니다. 결과물은 <a href="https://codesandbox.io/p/sandbox/github/Gyeonghun-Park/typing-animation/tree/master">여기</a>서 확인 할수 있습니다. 최종 버전의 코드는 아래와 같습니다:</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; motion, useInView, useAnimation, <span class="title class_">Variant</span> &#125; <span class="keyword">from</span> <span class="string">&quot;framer-motion&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AnimatedTextProps</span> = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span> | <span class="built_in">string</span>[];</span><br><span class="line">  el?: keyof <span class="variable constant_">JSX</span>.<span class="property">IntrinsicElements</span>;</span><br><span class="line">  className?: <span class="built_in">string</span>;</span><br><span class="line">  once?: <span class="built_in">boolean</span>;</span><br><span class="line">  repeatDelay?: <span class="built_in">number</span>;</span><br><span class="line">  animation?: &#123;</span><br><span class="line">    <span class="attr">hidden</span>: <span class="title class_">Variant</span>;</span><br><span class="line">    <span class="attr">visible</span>: <span class="title class_">Variant</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultAnimations = &#123;</span><br><span class="line">  <span class="attr">hidden</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">visible</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">transition</span>: &#123;</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">0.1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">AnimatedText</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">  text,</span></span><br><span class="line"><span class="params">  el: Wrapper = <span class="string">&quot;p&quot;</span>,</span></span><br><span class="line"><span class="params">  className,</span></span><br><span class="line"><span class="params">  once,</span></span><br><span class="line"><span class="params">  repeatDelay,</span></span><br><span class="line"><span class="params">  animation = defaultAnimations,</span></span><br><span class="line"><span class="params">&#125;: AnimatedTextProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> controls = <span class="title function_">useAnimation</span>();</span><br><span class="line">  <span class="keyword">const</span> textArray = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(text) ? text : [text];</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> isInView = <span class="title function_">useInView</span>(ref, &#123; <span class="attr">amount</span>: <span class="number">0.5</span>, once &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timeout</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">show</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      controls.<span class="title function_">start</span>(<span class="string">&quot;visible&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (repeatDelay) &#123;</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">          <span class="keyword">await</span> controls.<span class="title function_">start</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">          controls.<span class="title function_">start</span>(<span class="string">&quot;visible&quot;</span>);</span><br><span class="line">        &#125;, repeatDelay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isInView) &#123;</span><br><span class="line">      <span class="title function_">show</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      controls.<span class="title function_">start</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">  &#125;, [isInView]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Wrapper</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initial</span>=<span class="string">&quot;hidden&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">animate</span>=<span class="string">&#123;controls&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">variants</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">visible:</span> &#123; <span class="attr">transition:</span> &#123; <span class="attr">staggerChildren:</span> <span class="attr">0.1</span> &#125; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">hidden:</span> &#123;&#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">aria-hidden</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;textArray.map((line, lineIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;block&quot;</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">line</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">lineIndex</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;line.split(&quot; &quot;).map((word, wordIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">word</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">wordIndex</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;word.split(&quot;&quot;).map((char, charIndex) =&gt; (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">motion.span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">char</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">charIndex</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">variants</span>=<span class="string">&#123;animation&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  &gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;char&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;inline-block&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            ))&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">motion.span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Wrapper</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Framer Motion </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
